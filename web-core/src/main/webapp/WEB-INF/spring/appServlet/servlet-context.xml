<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<mvc:annotation-driven>
		<mvc:argument-resolvers>
			<bean class="org.springframework.data.web.PageableArgumentResolver">
			</bean>
		</mvc:argument-resolvers>
	</mvc:annotation-driven>

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<mvc:resources mapping="/static/**" location="/static/" />
	<mvc:resources mapping="/favicon.ico" location="/static/favicon.ico" />
	<mvc:resources mapping="/upload/**" location="/upload/" />
	<!-- use thymeleaf -->

	<bean id="templateResolver"
		class="org.thymeleaf.templateresolver.ServletContextTemplateResolver">
		<property name="prefix" value="/WEB-INF/thymeleaf/" />
		<property name="suffix" value=".html" />
		<property name="templateMode" value="HTML5" />
		<!-- Template cache is set to false (default is true). -->
		<property name="cacheable" value="false" />
		<property name="characterEncoding" value="UTF-8" />
	</bean>

	<bean id="templateEngine" class="org.thymeleaf.spring4.SpringTemplateEngine">
		<property name="templateResolver" ref="templateResolver" />
	</bean>

	<bean
		class="org.springframework.web.servlet.view.tiles2.TilesConfigurer">
		<property name="definitions">
			<list>
				<value>/WEB-INF/tiles/tiles-definitions.xml</value>
			</list>
		</property>
	</bean>
	
	
	<!-- FreeMarker的配置 -->
	<bean id="freeMarkerConfigurer"
		class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
		<property name="templateLoaderPaths" value="/WEB-INF/freeMarker/" />
		<property name="defaultEncoding" value="UTF-8" />
		<property name="freemarkerSettings">
			<props>
				<prop key="template_update_delay">10</prop>
				<prop key="defaultEncoding">UTF-8</prop>
				<prop key="url_escaping_charset">UTF-8</prop>
				<prop key="locale">zh_CN</prop>
				<prop key="boolean_format">true,false</prop>
				<prop key="time_format">HH:mm:ss</prop>
				<prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>
				<prop key="date_format">yyyy-MM-dd</prop>
				<prop key="number_format">#.##</prop>
				<prop key="whitespace_stripping">true</prop>
			</props>
		</property>
	</bean>

	<!-- - The ContentNegotiatingViewResolver delegates to the InternalResourceViewResolver 
		and BeanNameViewResolver, - and uses the requested media type (determined 
		by the path extension) to pick a matching view. - When the media type is 
		'text/html', it will delegate to the InternalResourceViewResolver's JstlView, 
		- otherwise to the BeanNameViewResolver. -->
	<bean
		class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<property name="viewResolvers">
			<list>
				
				
				
				<bean
					class="org.springframework.web.servlet.view.BeanNameViewResolver">
					<property name="order" value="1" />
				</bean>

				<bean
					class="org.springframework.web.servlet.view.tiles2.TilesViewResolver">
					<property name="order" value="1" />
				</bean>

				<!-- Default viewClass: JSTL view (JSP with html output) -->
				 <!-- <bean
					class="org.springframework.web.servlet.view.InternalResourceViewResolver">
					<property name="prefix" value="/WEB-INF/jsp/" />
					<property name="suffix" value=".jsp" /> 
					<property name="contentType" value="text/html; charset=utf-8" />
					<property name="order" value="3" />
					</bean>  -->
			
				<!-- 配置 FreeMarker视图解析器 -->
				<bean id="viewResolverFreeMarker"
					class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
					<property name="viewClass"
						value="org.springframework.web.servlet.view.freemarker.FreeMarkerView"></property>
					<property name="cache" value="false" />
					<property name="prefix" value="" />
					<!-- <property name="suffix" value=".ftl" /> --><!--可为空,方便实现自已的依据扩展名来选择视图解释类的逻辑 -->
					<property name="contentType" value="text/html;charset=utf-8" />
					<property name="exposeRequestAttributes" value="true" />
					<property name="exposeSessionAttributes" value="true" />
					<property name="exposeSpringMacroHelpers" value="true" />
					<property name="order" value="1" />
				</bean>
				
				<bean class="org.thymeleaf.spring4.view.ThymeleafViewResolver">
					<property name="templateEngine" ref="templateEngine" />
					<property name="characterEncoding" value="UTF-8" />
					<property name="order" value="1" />
					<!-- We need to set exclusions because Content Negotiation tries to 
						resolve from -->
					<!-- Thymeleaf even if a specific view bean (of a different class) is 
						already -->
					<!-- found, which might cause exceptions (e.g. ThymeleafView does not 
						have a -->
					<!-- 'marshaller' property). -->
					<property name="excludedViewNames" value="*.xml" />
				</bean>
			</list>
		</property>
	</bean>
	<mvc:default-servlet-handler />

	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<bean
				class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
				<property name="paramName" value="locale"></property>
			</bean>
		</mvc:interceptor>
	</mvc:interceptors>
	
	
    <mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<bean class="com.shishuo.cms.filter.GlobalInterceptor"></bean>
		</mvc:interceptor>
	</mvc:interceptors>
    

	<!-- <bean class="org.springframework.web.servlet.view.tiles2.TilesViewResolver"> 
		<property name="order" value="1" /> </bean> -->

	<!-- <bean class="org.springframework.web.servlet.view.BeanNameViewResolver"> 
		<property name="order" value="1" /> </bean> -->

</beans>
